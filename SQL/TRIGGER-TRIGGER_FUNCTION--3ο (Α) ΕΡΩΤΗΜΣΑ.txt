-- Trigger: CHANGE_ROOM_TRIG

-- DROP TRIGGER "CHANGE_ROOM_TRIG" ON public.reservation_payment;

CREATE TRIGGER "CHANGE_ROOM_TRIG"
    AFTER INSERT
    ON public.reservation_payment
    FOR EACH ROW
    EXECUTE PROCEDURE public."CHANGE_ROOM"();


==============================================================================================================



-- FUNCTION: public."CHANGE_ROOM"()

-- DROP FUNCTION public."CHANGE_ROOM"();

CREATE FUNCTION public."CHANGE_ROOM"()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$DECLARE
n_c integer; -- THE NUMBER OF RESERVATIONS IN THE SAME ROOM AT THE SAME TIME
n_c1 integer; -- THE NUMBER OF AVAILABLE ROOMS OF THE SAME TYPE
n_c2 integer; -- THE NUMBER OF AVAILABLE ROOMS OF A DIFFERENT TYPE

OLDROOMCOST integer; -- THE COST OF OF THE CURRENT ROOM
NEWROOMCOST integer; -- THE COST OF THE NEW ROOM

DISCOUNTPERCENT numeric; -- THE PERCENTAGE OF THE DISCOUNT

NEWROOMid integer; -- THE ID OF THE NEW ROOM
NEWBILL INTEGER; -- THE NEW BILL AFTER THE DISCOUNT

ROOM ROOM; -- THE CURRENT ROOM TYPE

BEGIN

DROP TABLE IF EXISTS reservation ;  -- STORE THE NEW RESERVATION
CREATE TEMP TABLE reservation AS(
	select * from RESERVATIONS where RESERVATIONS.reservationid = new.reservationid);

SELECT COUNT(*) -- COUNT THE NUMBER OF RESERVATIONS IN THE SAME ROOM AT THE SAME TIME
INTO n_c
FROM RESERVATIONS,reservation
WHERE reservation.ROOMID = RESERVATIONS.ROOMID AND (reservation.CHECK_IN = RESERVATIONS.CHECK_IN OR (reservation.CHECK_IN >RESERVATIONS.CHECK_IN AND reservation.CHECK_IN <RESERVATIONS.CHECK_OUT));

IF n_c > 0 --IF THERE IS MORE THAN ONE
THEN 
	SELECT ROOMFULLNAME
	INTO ROOM
	FROM ROOMS,reservation
	WHERE ROOMS.ROOMID = reservation.ROOMID;
	
 	DROP TABLE IF EXISTS SAME_ROOM_TYPE_ENGAGED ; --CREATE A TABLE WITH ALL THE ENGAGED ROOMS OF THE SAME TYPE
	CREATE TEMP TABLE SAME_ROOM_TYPE_ENGAGED AS(
 	SELECT rooms.roomid AS ROOMID,COALESCE(count(reservations.*))
	FROM rooms,reservations,reservation
	WHERE rooms.roomid = reservations.roomid and roomfullname = ROOM and reservations.check_in = reservation.CHECK_IN
	GROUP BY rooms.roomid);
	
	DROP TABLE IF EXISTS SAME_ROOM_TYPE_AVAIL;  --CREATE A TABLE WITH ALL THE AVAILABLE ROOMS OF THE SAME TYPE
	CREATE TEMP TABLE SAME_ROOM_TYPE_AVAIL AS(
	SELECT rooms.roomid AS ROOMID
	FROM ROOMS,SAME_ROOM_TYPE_ENGAGED
	WHERE ROOMS.ROOMID NOT IN(SELECT ROOMID FROM SAME_ROOM_TYPE_ENGAGED) and roomfullname = ROOM);
	
	SELECT COUNT(*) -- COUNT THE AVAILABLE ONES
	INTO n_c1
	FROM SAME_ROOM_TYPE_AVAIL;
	
	
	IF(n_c1 > 0) -- IF THERE IS AT LEAST ONE SELECT A RANDOM FROM THE AVAILABLE ONES AND MAKE IT THE NEW ROOM
	THEN
	 UPDATE RESERVATIONS 
	 SET ROOMID = (SELECT ROOMID FROM SAME_ROOM_TYPE_AVAIL ORDER BY RANDOM() LIMIT 1) 
	 WHERE RESERVATIONS.RESERVATIONID = NEW.RESERVATIONID;
	 
	ELSE -- ELSE CHECK FOR A DIFFERENT TYPE
	
		DROP TABLE IF EXISTS DIFF_ROOM_TYPE_ENGAGED ; 
		CREATE TEMP TABLE DIFF_ROOM_TYPE_ENGAGED AS(
			select rooms.roomid,COALESCE(count(reservations.*))
			from rooms,reservations,reservation
			where roomfullname != ROOM and reservations.check_in = reservation.CHECK_IN
			group by rooms.roomid);

		DROP TABLE IF EXISTS DIFF_ROOM_TYPE_AVAIL; 
		CREATE TEMP TABLE DIFF_ROOM_TYPE_AVAIL AS(
			SELECT rooms.roomid AS ROOMID
			FROM ROOMS,DIFF_ROOM_TYPE_ENGAGED
			WHERE ROOMS.ROOMID != DIFF_ROOM_TYPE_ENGAGED.ROOMID and roomfullname != ROOM);
			
			
		SELECT COUNT(*) -- COUNT THE AVAILABLE ONES
		INTO n_c2
		FROM DIFF_ROOM_TYPE_AVAIL;
		 
		IF(n_c2 > 0)
		THEN
			SELECT ROOMID
			INTO NEWROOMid
			FROM DIFF_ROOM_TYPE_AVAIL
			ORDER BY RANDOM() LIMIT 1;

			SELECT COST
			INTO OLDROOMCOST
			FROM ROOMS
			WHERE ROOMFULLNAME = ROOM;

			SELECT COST
			INTO NEWROOMCOST
			FROM ROOMS
			WHERE ROOMID = NEWROOMID;

			IF(NEWROOMCOST < OLDROOMCOST)
			THEN
				SELECT (oldroomcost - newroomcost) * 100.0/oldroomcost - 5
				INTO DISCOUNTPERCENT;

				UPDATE RESERVATIONS 
				SET ROOMID = NEWROOMID 
				WHERE RESERVATIONS.RESERVATIONID = NEW.RESERVATIONID;

				SELECT BILL INTO NEWBILL FROM RESERVATION_PAYMENT WHERE RESERVATIONID = NEW.RESERVATIONID;

				UPDATE RESERVATION_PAYMENT
				SET BILL = BILL -  round((DISCOUNTPERCENT * BILL )/ 100)
				WHERE RESERVATION_PAYMENT.RESERVATIONID = NEW.RESERVATIONID;

				SELECT BILL INTO NEWBILL FROM RESERVATION_PAYMENT WHERE RESERVATIONID = NEW.RESERVATIONID;
			ELSE 
				UPDATE RESERVATIONS 
				SET ROOMID = NEWROOMID 
				WHERE RESERVATIONS.RESERVATIONID = NEW.RESERVATIONID;
			END IF;
		ELSE
			RAISE NOTICE'THERE IS NOT AN AVAILABLE ROOM';
			DELETE FROM RESERVATIONS WHERE RESERVATIONS.RESERVATIONID = NEW.RESERVATIONID;
			DELETE FROM ROOMS WHERE RESERVATIONS.RESERVATIONID = NEW.RESERVATIONID;			
		END IF;
	END IF;
END IF;
RETURN NEW;
END;
$BODY$;

ALTER FUNCTION public."CHANGE_ROOM"()
    OWNER TO postgres;

